from nis import match
import hashlib
import config
import logging
from model import item
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineQuery, \
    InputTextMessageContent, InlineQueryResultArticle, \
    CallbackQuery

import db
from model import storage
import flow


# log level
logging.basicConfig(level=logging.INFO)

# bot init
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)

@dp.callback_query_handler()
async def run_command(query: CallbackQuery):
    data = flow.My_command()
    data.decompile(query.data)
    operator=storage.StorageUser(query.from_user.id, query.from_user.username)
    operator_id=operator.prop.get('id')
    is_admin = operator.prop.get('admin')
    is_moderator = operator.prop.get('moderator')


    #–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if int(query.from_user.id)!=data.auth:
        await bot.answer_callback_query(query.id, show_alert=True, text="–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    #—Å–º–æ—Ç—Ä–∏–º —Å–µ–∫—Ü–∏—é
    if data.section == '–ø':
        pass

# —Å–µ–∫—Ü–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π
    if data.section == '–Ω–Ω':
        pass
    if data.section == '–Ω–∫':
        if is_admin!=True:
            await bot.answer_callback_query(query.id, show_alert=True, text="–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–Ω–æ –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return
        if data.context=='all':
            answer_text = '–ê–∫—Ç–∏–≤–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:'
            cat:item.Category
            for cat in item.get_categories():
                cat_name = cat.prop.get("name")
                cat_id = cat.prop.get("id")
                len_id = 6
                if cat.prop.get('parent') == None:
                    cat_string = f'\n`{cat_id}``' + '-'*(len_id-len(str(cat_id))) + f'``{cat_name}`'
                else:
                    cat_string = f'\n`{cat_id}``' + '-'*(len_id-len(str(cat_id))+4) + f'``{cat_name}`'
                answer_text = answer_text + cat_string
            await bot.send_message(chat_id=query.from_user.id, parse_mode='Markdown', text=answer_text,)
            await bot.answer_callback_query(query.id) 
            return
        if data.context == 'new':
            new_cat_name = query.message.text
            obj_cat = item.Category(0)
            obj_cat.prop.update({'name':new_cat_name})
            obj_cat.update_data()
            answer_text = f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è {new_cat_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞\nid = {obj_cat.prop.get("id")}'
            await bot.answer_callback_query(query.id, show_alert=True, text=answer_text)

    if data.section == '–∑':
        pass
    if data.section == '—Ö':
        pass

#—Å–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if data.section[0] == '—é':
        if is_admin!=True:
            await bot.answer_callback_query(query.id, show_alert=True, text="–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–Ω–æ –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return
        dest_user = storage.StorageUser(storage.get_tgid(data.destination),storage.get_tgname(data.destination))
        #–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö
        if data.context == 'all':
            answer_text = '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n'
            for user in storage.get_users():
                len_name = len(user.prop.get('name'))
                len_space = 20 - len_name
                if len_space<1:
                    len_space=1
                if user.prop.get('admin')==True:
                    pic = 'üëÆ‚Äç‚ôÄÔ∏è'
                elif user.prop.get('moderator')==True:
                    pic = 'üë®‚Äçüíª'
                elif user.prop.get('banned')==True:
                    pic = 'üíî'
                else:
                    pic = 'üë§'
                answer_text = f"{answer_text}{pic} `@{user.prop.get('name')}``{'-'*len_space}``{user.prop.get('tgid')}`\n"
            await bot.send_message(
                chat_id=query.from_user.id,
                parse_mode='Markdown',
                text=answer_text,
                )
            await bot.answer_callback_query(query.id) 
            return
        #—Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º
        if data.section == '—é–∞':
            dest_user.do_admin(operator_id)
        #—Å–¥–µ–ª–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
        if data.section == '—é–º':
            dest_user.do_moderator(operator_id)
        #–∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if data.section == '—é–±':
            dest_user.do_ban(operator_id)
        await bot.answer_callback_query(query.id, show_alert=True, text=dest_user.description_update())
        return
    
    await bot.answer_callback_query(query.id) 

@dp.message_handler()
async def echo(message: types.Message):
    # print(message.text)
    # user = {}
    # user.update({'id':message.from_user.id})
    # user.update({'name':message.from_user.username})
    # a = storage.StorageUser(user.get('id'), user.get('name'))
    # if message.text=='–ø–æ–∫–∞–∂–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
    #     list_cat = '–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n'
    #     for i in item.get_categories():
    #         list_cat = list_cat + "\n" + i.pub_name 
    #     await message.answer(list_cat)
    # if message.text=='–¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ':
    #     res = a.add_resource()
    # await message.answer(message.text)
    pass

@dp.inline_handler()
async def inline_result(inline_query: InlineQuery):
    print("–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å".center(60, "_"))
    print(inline_query)
    text = inline_query.query
    # input_content = InputTextMessageContent(text)
    # result_id: str = hashlib.md5(text.encode()).hexdigest()
    user = storage.StorageUser( \
        inline_query.from_user.id, \
        inline_query.from_user.username)
    
    await bot.answer_inline_query(inline_query.id, \
        results=flow.Flow(user, int(inline_query.id)).articles(text), \
        cache_time=0)

# run long-polling
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
